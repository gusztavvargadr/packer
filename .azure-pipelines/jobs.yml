parameters:
  sample: ''
  image: ''
  provider: ''
  build: ''

jobs:
  - job: build
    displayName: Build ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }}

    pool:
      ${{ if eq(parameters.provider, 'hyperv') }}:
        name: windows-2022-hyperv
      ${{ elseif eq(parameters.provider, 'virtualbox') }}:
        name: ubuntu-2204-virtualbox
      ${{ else }}:
        name: default
        demands:
          - VSTS_AGENT_CAP_VIRTUALIZATION_PROVIDER -equals ${{ parameters.provider }}

    workspace:
      clean: all

    timeoutInMinutes: 150

    variables:
      sourcePipelineArtifactsPath: $[ replace(variables['resources.pipeline.source.pipelineName'], '.', '/') ]

    steps:
      - checkout: self
        submodules: recursive

      - script: |
          dotnet --info

          dotnet tool restore
        displayName: Initialize .NET

      - script: |
          packer --version
        displayName: Initialize Packer

      - script: |
          vagrant --version
          vagrant plugin list

          vagrant box list
          vagrant global-status --prune
        displayName: Initialize Vagrant

      - script: |
          dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target init
        displayName: Init

      - script: |
          dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target restore
        displayName: Restore

      - ${{ if eq(parameters.build, 'native') }}:
        - task: DownloadPipelineArtifact@2
          inputs:
            source: specific
            artifact: native-build
            targetPath: ./artifacts/$(sourcePipelineArtifactsPath)/native
            project: $(System.TeamProjectId)
            pipeline: $(resources.pipeline.source.pipelineID)
            runVersion: latestFromBranch
            runBranch: $(Build.SourceBranch)
          displayName: Download artifacts
          condition: and(succeeded(), ne(variables['resources.pipeline.source.pipelineID'], ''))

      - ${{ if eq(parameters.build, 'vagrant') }}:
        - task: DownloadPipelineArtifact@2
          inputs:
            source: current
            artifact: native-build
            targetPath: ./artifacts/${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/native
          displayName: Download artifacts

      - script: |
          dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target build
        displayName: Build

      - script: |
          dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target test
        displayName: Test

      - publish: ./artifacts/${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }}
        artifact: ${{ parameters.build }}-build
        displayName: Publish artifacts

      - script: |
          dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target clean
        displayName: Clean
        condition: always()

  - ${{ if eq(parameters.build, 'vagrant') }}:
    - job: publish
      displayName: Publish ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }}
      dependsOn: build
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

      pool:
        name: default

      workspace:
        clean: all

      variables:
        - group: environment-vagrant-cloud
        - group: environment-hcp-vagrant

      steps:
        - checkout: self
          submodules: recursive

        - script: |
            dotnet --info

            dotnet tool restore
          displayName: Initialize .NET

        - script: |
            packer --version
          displayName: Initialize Packer

        - script: |
            vagrant --version
            vagrant plugin list

            vagrant box list
            vagrant global-status --prune
          displayName: Initialize Vagrant

        - script: |
            dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target init
          displayName: Init

        - task: DownloadPipelineArtifact@2
          inputs:
            source: current
            artifact: vagrant-build
            targetPath: ./artifacts/${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/vagrant
          displayName: Download artifacts

        - script: |
            dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target publish
          displayName: Publish
          env:
            VAGRANT_CLOUD_TOKEN: $(vagrant-cloud-token)
            HCP_CLIENT_ID: $(hcp-client-id)
            HCP_CLIENT_SECRET: $(hcp-client-secret)

        - script: |
            dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target clean
          displayName: Clean
          condition: always()

    - job: download
      displayName: Download ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }}
      dependsOn: publish
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

      pool:
        ${{ if eq(parameters.provider, 'hyperv') }}:
          name: windows-2022-hyperv
        ${{ elseif eq(parameters.provider, 'virtualbox') }}:
          name: ubuntu-2204-virtualbox
        ${{ else }}:
          name: default
          demands:
            - VSTS_AGENT_CAP_VIRTUALIZATION_PROVIDER -equals ${{ parameters.provider }}

      workspace:
        clean: all

      steps:
        - checkout: self
          submodules: recursive

        - script: |
            dotnet --info

            dotnet tool restore
          displayName: Initialize .NET

        - script: |
            packer --version
          displayName: Initialize Packer

        - script: |
            vagrant --version
            vagrant plugin list

            vagrant box list
            vagrant global-status --prune
          displayName: Initialize Vagrant

        - script: |
            dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target init
          displayName: Init

        - script: |
            dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target download
          displayName: Download

        - script: |
            dotnet cake --configuration ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }} --target clean
          displayName: Clean
          condition: always()
